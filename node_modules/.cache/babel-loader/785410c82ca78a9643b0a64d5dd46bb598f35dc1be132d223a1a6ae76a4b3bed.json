{"ast":null,"code":"var _jsxFileName = \"D:\\\\react2023\\\\asadapp\\\\src\\\\App.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport AddIcon from '@mui/icons-material/Add';\nimport \"./index.css\";\nimport ToDo from './Todo';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [List, setlist] = useState(\"\");\n  const [addlist, setaddlist] = useState([]);\n  let InputEvent = event => {\n    setlist(event.target.value);\n  };\n  let AddEvent = () => {\n    setaddlist(oldArray => {\n      return [...oldArray, List];\n    });\n    setlist(\"\");\n  };\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"main_coontainer\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"app\",\n        children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n          children: \"ToDo List\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"br\", {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 27\n        }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n          type: \"text\",\n          placeholder: \"Enter Your List\",\n          value: List,\n          onChange: InputEvent\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          onClick: AddEvent,\n          children: [\" \", /*#__PURE__*/_jsxDEV(AddIcon, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 36,\n            columnNumber: 37\n          }, this), \" \"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 36,\n          columnNumber: 9\n        }, this), /*#__PURE__*/_jsxDEV(\"ul\", {\n          children: addlist.map((element, index) => {\n            return /*#__PURE__*/_jsxDEV(ToDo, {\n              index: index,\n              text: element\n            }, index, false, {\n              fileName: _jsxFileName,\n              lineNumber: 39,\n              columnNumber: 18\n            }, this);\n          })\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 9\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 7\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n}\n_s(App, \"nfrZ5dhYaJ1VJlSIj7xkWH65IL0=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","AddIcon","ToDo","jsxDEV","_jsxDEV","Fragment","_Fragment","App","_s","List","setlist","addlist","setaddlist","InputEvent","event","target","value","AddEvent","oldArray","children","className","fileName","_jsxFileName","lineNumber","columnNumber","type","placeholder","onChange","onClick","map","element","index","text","_c","$RefreshReg$"],"sources":["D:/react2023/asadapp/src/App.jsx"],"sourcesContent":["import React, { useState } from 'react';\n\nimport AddIcon from '@mui/icons-material/Add';\nimport \"./index.css\";\nimport ToDo from './Todo';\n\n\n\n\n\nfunction App() {\n  const [List, setlist] = useState(\"\");\n  const [addlist, setaddlist] = useState([]);\n\n  let InputEvent = (event)=>{\n    setlist(event.target.value)\n\n  };\n  \n  let AddEvent = () =>{\n    setaddlist((oldArray)=>{\n      return[...oldArray,List]\n\n    })\n    setlist(\"\")\n  };\n\n  \n\n  return (\n    <>\n    <div className='main_coontainer'>\n      <div className='app'>\n        <h1>ToDo List</h1><br/>\n        <input type='text' placeholder='Enter Your List'value={List} onChange={InputEvent}/>\n        <button onClick={AddEvent}> <AddIcon /> </button>\n        <ul>\n        { addlist.map((element, index)=>{\n          return(<ToDo \n          key = {index}\n          index = {index}\n          text={element}/>)\n        })}\n          \n        </ul>\n      </div>\n    </div>\n        \n    </>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AAEvC,OAAOC,OAAO,MAAM,yBAAyB;AAC7C,OAAO,aAAa;AACpB,OAAOC,IAAI,MAAM,QAAQ;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAAA,SAAAC,QAAA,IAAAC,SAAA;AAM1B,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGV,QAAQ,CAAC,EAAE,CAAC;EACpC,MAAM,CAACW,OAAO,EAAEC,UAAU,CAAC,GAAGZ,QAAQ,CAAC,EAAE,CAAC;EAE1C,IAAIa,UAAU,GAAIC,KAAK,IAAG;IACxBJ,OAAO,CAACI,KAAK,CAACC,MAAM,CAACC,KAAK,CAAC;EAE7B,CAAC;EAED,IAAIC,QAAQ,GAAGA,CAAA,KAAK;IAClBL,UAAU,CAAEM,QAAQ,IAAG;MACrB,OAAM,CAAC,GAAGA,QAAQ,EAACT,IAAI,CAAC;IAE1B,CAAC,CAAC;IACFC,OAAO,CAAC,EAAE,CAAC;EACb,CAAC;EAID,oBACEN,OAAA,CAAAE,SAAA;IAAAa,QAAA,eACAf,OAAA;MAAKgB,SAAS,EAAC,iBAAiB;MAAAD,QAAA,eAC9Bf,OAAA;QAAKgB,SAAS,EAAC,KAAK;QAAAD,QAAA,gBAClBf,OAAA;UAAAe,QAAA,EAAI;QAAS;UAAAE,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eAAApB,OAAA;UAAAiB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC,eACvBpB,OAAA;UAAOqB,IAAI,EAAC,MAAM;UAACC,WAAW,EAAC,iBAAiB;UAAAV,KAAK,EAAEP,IAAK;UAACkB,QAAQ,EAAEd;QAAW;UAAAQ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAC,CAAC,eACpFpB,OAAA;UAAQwB,OAAO,EAAEX,QAAS;UAAAE,QAAA,GAAC,GAAC,eAAAf,OAAA,CAACH,OAAO;YAAAoB,QAAA,EAAAC,YAAA;YAAAC,UAAA;YAAAC,YAAA;UAAA,OAAE,CAAC,KAAC;QAAA;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACjDpB,OAAA;UAAAe,QAAA,EACER,OAAO,CAACkB,GAAG,CAAC,CAACC,OAAO,EAAEC,KAAK,KAAG;YAC9B,oBAAO3B,OAAA,CAACF,IAAI;cAEZ6B,KAAK,EAAIA,KAAM;cACfC,IAAI,EAAEF;YAAQ,GAFPC,KAAK;cAAAV,QAAA,EAAAC,YAAA;cAAAC,UAAA;cAAAC,YAAA;YAAA,OAEG,CAAC;UAClB,CAAC;QAAC;UAAAH,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAEE,CAAC;MAAA;QAAAH,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACF;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH;EAAC,gBAEJ,CAAC;AAEP;AAAChB,EAAA,CAxCQD,GAAG;AAAA0B,EAAA,GAAH1B,GAAG;AA0CZ,eAAeA,GAAG;AAAC,IAAA0B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}